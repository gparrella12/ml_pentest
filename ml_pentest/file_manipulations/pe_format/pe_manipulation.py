from abc import abstractmethod

class PEManipulation():
    """
    PEManipulation serves as an abstract base class for implementing manipulations on Portable Executable (PE) files.

    Attributes:
        _pe_file (np.array): A numpy array representing the PE file to be manipulated.

    Methods:
        __init__(pe_file: np.array = None) -> None: Constructor that initializes the PEManipulation object.
        apply_manipulation(): Abstract method that applies a manipulation to a PE file.
        set_pe_file(pe_file: np.array) -> None: Sets the PE file to be manipulated.
    """
    
    def __init__(self, pe_file = None):
        """Creates a PEManipulation object.

        Args:
            pe_file (np.array, optional): The PE file to manipulate as numpy array. Defaults to None.
        """        
        self._pe_file = pe_file


    @abstractmethod
    def apply_manipulation(self):
        """
        Applies a manipulation to a PE file. The particular manipulation is defined by subclasses.
        """
        raise NotImplementedError("Subclass must implement abstract method")
    
    def set_pe_file(self, pe_file):
        """
        Sets the PE file to manipulate.

        Args:
            pe_file (np.array): The PE file to manipulate as numpy array.
        """
        self._pe_file = pe_file

