from ml_pentest.models.wrappers.model_wrapper import ModelWrapper
import numpy as np
import torch

class MalConvWrapper(ModelWrapper):
    """
    MalConvWrapper is a concrete implementation of the ModelWrapper abstract class, specifically designed for MalConv classifiers.

    Methods:
        __init__(model: object, max_len: int, use_batch: bool = False) -> None:
            Initializes a MalConvWrapper object.
        classify_sample(sample: bytes) -> float:
            Classifies a single sample using the MalConv model and returns the classification probability.

    Note:
        This class assumes that the MalConv model object passed to it has a method called 'eval' for setting the model to evaluation mode.
    """

    def __init__(self, model, max_len,use_batch=False) -> None:
        """
        Initializes a MalConvWrapper object.

        Args:
            model (object): An object that represents the MalConv classifier model to be used for classification.
            max_len (int): The maximum length of the byte array for classification.
            use_batch (bool, optional): If True, batch processing is enabled. Defaults to False.
        """
        super().__init__(model, use_batch)
        self._max_len = max_len

    def classify_sample(self, sample):
        """
        Classifies a single sample using the MalConv model.
        This method includes all necessary pre-processing steps to prepare the sample for the model and returns the classification probability.

        Args:
            sample (bytes): A byte array that represents an executable file.

        Returns:
            float: The classification probability, ranging from 0 to 1, where 1 represents the malware class.

        Note:
            The function assumes that the MalConv model has an 'eval' method for setting the model to evaluation mode.
        """
        self._model.eval()
        x = np.frombuffer(sample[:self._max_len], dtype=np.uint8).astype(np.int16)+1 
        x = torch.tensor(x)
        y = self._model(x.unsqueeze(0))
        return y.item()




