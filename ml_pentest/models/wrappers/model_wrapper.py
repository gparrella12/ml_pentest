from abc import abstractmethod

class ModelWrapper():
    """
    ModelWrapper serves as an abstract wrapper class for a classifier model intended for use in black-box attacks.
    This class is designed to be model-agnostic and requires the implementation of the methods classify_sample() and classify_batch().

    Attributes:
        _model: An object that represents the classifier model to be used for classification.
        _use_batch (bool): A flag indicating whether batch classification is enabled.

    Methods:
        __init__(model, use_batch: bool = False) -> None:
            Initializes a ModelWrapper object.
        classify_sample(sample: bytes) -> float:
            Abstract method to classify a single sample. Must be implemented by subclasses.
        classify_batch(batch: list[bytes]) -> list[float]:
            Abstract method to classify a batch of samples. Must be implemented by subclasses.

    Note:
        The required modules for implementing classify_sample() and classify_batch() (e.g., PyTorch, Sci-Kit Learn, etc.) must be installed in the environment.
    """

    def __init__(self, model, use_batch = False) -> None:
        """Create an object of this class by passing the classifier to use to classify the samples.

        Args:
            model : an object that represents the classifier to use to classify the samples.
            use_batch (boolean): if True, the classify_batch() function will be called instead of classify_sample() during attacks, if the attacks support this modality.
        """
        self._model = model
        self._use_batch = use_batch

    @abstractmethod
    def classify_sample(self, sample):
        """Classify a sample using the model.
           This function should return a probability between 0 and 1 where 1 is the malware class.
           It should include all necessary pre-processing steps to prepare the sample for the model.

        Args:
            model : an object that represent the classifier
            sample (byte array): a byte array that represents an executable file
        """
        raise NotImplementedError('Subclasses must override classify_sample()!')
    
    @abstractmethod
    def classify_batch(self, batch):
        """Classify a batch of samples using the model.
           This function should return a list of probabilities between 0 and 1 where 1 is the malware class.
           It should include all necessary pre-processing steps to prepare the sample for the model.

        Args:
            model : an object that represent the classifier
            batch (list of byte arrays): a list of byte array that represents an executable file
        """
        raise NotImplementedError('Subclasses must override classify_batch()!')