from ml_pentest.models.wrappers.model_wrapper import ModelWrapper
from torchvision import transforms
from torchvision.transforms.functional import InterpolationMode
import torch
class ImageBasedWrapper(ModelWrapper):
    """
    ImageBasedWrapper is a concrete implementation of the ModelWrapper abstract class, specifically designed for image-based classifiers.

    Methods:
        __init__(model: object, data_transforms: callable, img_size: tuple) -> None:
            Initializes an ImageBasedWrapper object.
        classify_sample(sample: bytes) -> float:
            Classifies a single sample using the image-based model and returns the classification probability.

    Note:
        This class assumes that the image-based model object passed to it has a method called 'eval' for evaluation and that PyTorch is being used.
    """
    def __init__(self, model, data_transforms, img_size) -> None:
        """
        Initializes an ImageBasedWrapper object.

        Args:
            model (object): An object that represents the image-based classifier model to be used for classification.
            data_transforms (callable): A callable for transforming the sample into the appropriate image tensor.
            img_size (tuple): The dimensions of the image tensor.

        Note:
            The model is automatically moved to the GPU if available.
        """
        super().__init__(model, use_batch=False)
        self._data_transforms = data_transforms
        self._img_size = img_size
        self._model = self._model.to(torch.device('cuda' if torch.cuda.is_available() else 'cpu'))
    
    def classify_sample(self, sample):
        """
        Classifies a single sample using the image-based model.
        This method includes all necessary pre-processing steps to prepare the sample for the model and returns the classification probability.

        Args:
            sample (bytes): A byte array that represents an executable file.

        Returns:
            float: The classification probability, ranging from 0 to 1, where 1 represents the malware class.

        Note:
            The function assumes that PyTorch is being used and that the model is in evaluation mode.
        """
        self._model.eval()
        img_tensor = self._data_transforms(sample)
        img_tensor = img_tensor.to(torch.device('cuda' if torch.cuda.is_available() else 'cpu'))
        img_tensor = img_tensor.unsqueeze(0)
        output = self._model(img_tensor)
        output = torch.squeeze(output)
        return output.item()

