from ml_pentest.models.wrappers.model_wrapper import ModelWrapper
from ml_pentest.models.feature_extractor.pe_format.ember_feature_extractor import get_ember_features_from_bytes

from itertools import chain
import numpy as np
class GBDTWrapper(ModelWrapper):
    """
    GBDTWrapper is a concrete implementation of the ModelWrapper abstract class, specifically designed for Gradient Boosting Decision Tree (GBDT) models.

    Methods:
        __init__(model: object) -> None:
            Initializes a GBDTWrapper object.
        classify_sample(sample: bytes) -> float:
            Classifies a single sample using the GBDT model and returns the classification probability.

    Note:
        This class assumes that the GBDT model object passed to it has a method called 'predict' for making predictions.
    """
    def __init__(self, model):
        """
        Initializes a GBDTWrapper object.

        Args:
            model (object): An object that represents the GBDT classifier model to be used for classification.
        """
        super().__init__(model)
    
    def classify_sample(self, sample, remove_coff_header_features=False):
        """
        Classifies a single sample using the GBDT model.
        This method includes all necessary pre-processing steps to prepare the sample for the model and returns the classification probability.

        Args:
            sample (bytes): A byte array that represents an executable file.
            remove_coff_header_features (boolean) : Whether to remove the features associated to those related to the machine value and subsystem value from the COFF header. Defaults to False.

        Returns:
            float: The classification probability, ranging from 0 to 1, where 1 represents the malware class.

        Note:
            The function get_ember_features_from_bytes() is assumed to be available for feature extraction.
        """
        features = np.array([get_ember_features_from_bytes(sample)])
        if remove_coff_header_features:
            # remove the features associated to those related to the machine value and subsystem value from the COFF header
            # these can be discriminant, but not indicative of a malicious behaviour!
            intervals_to_remove = list(chain(range(627, 637), range(647, 657)))
            x = np.array([np.delete(lista, intervals_to_remove) for lista in features])
            result = self._model.predict(x)
        else:
            result = self._model.predict(features)
        return result[0]

