import torch.nn as nn
from PIL import Image
# Convert Bin to Image Module
class BinToImg(nn.Module):
    """
    BinToImg is a PyTorch module designed to convert binary data into an image format. 
    This class is a subclass of the PyTorch nn.Module class.

    Methods:
        __init__(shape: tuple = (224, 224)) -> None:
            Initializes a BinToImg object with the specified image shape.
        forward(x: bytes) -> PIL.Image.Image:
            Converts the binary data into an image and returns it.
        __get_image_width(file_size: int) -> int:
            Determines the width of the image based on the size of the binary data.

    Attributes:
        shape (tuple): The shape of the output image, specified as (height, width).

    Note:
        The class assumes that the PIL library is correctly installed and imported.
    """
    def __init__(self, shape=(224, 224)):
        """
        Initializes a BinToImg object.

        Args:
            shape (tuple, optional): The shape of the output image, specified as (height, width). Defaults to (224, 224).
        """
        super().__init__()
        self.shape = shape

    def __get_image_width(self, file_size):
        """
        Determines the width of the image based on the size of the binary data.

        Args:
            file_size (int): The size of the binary data in bytes.

        Returns:
            int: The width of the image.

        Note:
            This is a private method and should not be called directly.
        """
        kb = 1024
        if file_size < 10 * kb:
            return 32
        if file_size < 30 * kb:
            return 64
        if file_size < 60 * kb:
            return 128
        if file_size < 100 * kb:
            return 256
        if file_size < 200 * kb:
            return 384
        if file_size < 500 * kb:
            return 512
        if file_size < 1000 * kb:
            return 768
        return 1024

    def forward(self, x):
        """
        Converts the binary data into an image.

        Args:
            x (bytes): The binary data to be converted.

        Returns:
            PIL.Image.Image: The converted image in RGB format.

        Note:
            The function assumes that the PIL library is correctly installed and imported.
        """
        size = len(x)
        image_width = self.__get_image_width(size)
        image_height = int(size / image_width)
        image_size = image_width * image_height

        image = Image.new('L', (image_width, image_height))  #L stands for greyscale image
        image.putdata(x[:image_size])

        return image.convert('RGB')