
from abc import abstractmethod
import random
from ml_pentest.attacks.blackbox.blackbox_attack import BlackBoxAttack
import numpy as np
from abc import ABC, abstractmethod

class GammaAttack(BlackBoxAttack, ABC):
    """
    GammaAttack is an abstract base class designed to implement the GAMMA attack on machine learning models
    used for malware classification. It inherits from the BlackBoxAttack and ABC (Abstract Base Class) classes.

    Attributes:
        _population_size (int): The size of the population of individuals in the genetic algorithm.
        _lambda (float): The lambda value used in the fitness function.
        _iterations (int): The maximum number of iterations of the genetic algorithm.
        _query_budget (int): The maximum number of queries allowed to the classifier.
        _seed (int): The seed to be used in the random number generator.
        _debug (bool): Whether to print debug information.
        _hard_label (bool): Whether to use hard labels in the fitness function.
        _threshold (float): The threshold used to detect a sample as malware.
        _loss (str): The loss function used in the fitness function.
        _input_sample (np.ndarray): The input sample to be used in the attack.

    Methods:
        __init__(): Initializes a GammaAttack object with given parameters.
        set_sample(): Sets the input sample to be used in the attack.
        run(): Abstract method that must be implemented by the subclass.
        get_attack_characteristic(): Returns a string with all attack characteristics in JSON format.
    """

    def __init__(self, model_wrapper , population_size, lambda_value, iterations, query_budget=None, seed=None, debug=False, hard_label=False, threshold=0.5, loss='l1') -> None:
        """
        Initializes a GAMMA Attack object with the given parameters.

        Args:
            model_wrapper (ModelWrapper): The classifier to be attacked wrapped into the defined wrapper.
            population_size (int): The size of the population of individuals in the genetic algorithm.
            lambda_value (float): The lambda value used in the fitness function.
            iterations (int): number of maximum iterations of the genetic algorithm. If query_budget is used, the maximum number 
                              of iterations will be limited by the query budget.
            query_budget (int): The maximum number of queries allowed to the classifier. Defaults to None, which means 
                                that there is no limit to the number of queries.
            seed (int): The seed to be used in the random number generator.
            debug (bool): Whether to print debug information. Default to False.
            hard_label (bool): Whether to use hard labels in the fitness function.
            threshold (float): The threshold used to detect a sample as a malware. Tipically, if the
                               confidence of the classifier is > 0.5, this is a malware, but you can 
                               change the value if this is not the case. This value is used only in hard label mode.
            loss (str): The loss function used in the fitness function to combine confidence and penalty term. With 
                        'l1' the loss is the absolute value of the difference in bytes between original samples and adversarial one. 
                        The other values are:
                        - 'cw', in which the loss is computed as max(confidence - self.threshold + 0.1, 0) + penalty.
                        - 'log', in which the loss is computed as -log(1 - confidence) + penalty.

        Returns:
            None
        """
        super().__init__(model_wrapper)
        self._population_size = population_size
        self._lambda = lambda_value
        self._iterations = iterations
        self._query_budget = query_budget
        self._seed = seed
        if self._seed != None:
            random.seed(self._seed)
            np.random.seed(self._seed)
        self._debug = debug
        self._hard_label = hard_label
        self._threshold = threshold
        self._loss = loss
    

    def set_sample(self, sample):
        """
        Sets the input sample to be used in the attack.

        Args:
            sample (bytes): The input sample to be used in the attack.

        Returns:
            None
        """
        self._input_sample = np.frombuffer(sample, dtype=np.uint8)

    @abstractmethod
    def run(self):
        raise NotImplementedError("This method must be implemented by the subclass.")
    
    def get_attack_characteristic(self):
        """Return a string with all attacks characteristics in JSON format.
        """
        attack_characteristics = {
            "attack": self.__class__.__name__,
            "population_size": self._population_size,
            "lambda": self._lambda,
            "iterations": self._iterations,
            "query_budget": self._query_budget,
            "seed": self._seed,
            "debug": self._debug,
            "hard_label": self._hard_label,
            "threshold": self._threshold,
            "loss": self._loss
            }
        return attack_characteristics