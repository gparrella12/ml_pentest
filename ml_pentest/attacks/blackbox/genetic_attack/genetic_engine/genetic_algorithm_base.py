from abc import ABC, abstractmethod


class GeneticEngine(ABC):
    """A genetic algorithm engine that can be used to solve a given problem."""

    @abstractmethod
    def initialization(self):
        """Initialization phase of the genetic algorithm"""
        raise NotImplementedError("Subclass must implement abstract method")

    @abstractmethod
    def iteration(self):
        """Single iteration of the genetic algorithm"""
        raise NotImplementedError("Subclass must implement abstract method")

    @abstractmethod
    def exiting_operations(self):
        """Operations to perform before exiting the genetic algorithm"""
        raise NotImplementedError("Subclass must implement abstract method")

    @abstractmethod
    def termination_condition(self):
        """Condition to terminate the genetic algorithm"""
        raise NotImplementedError("Subclass must implement abstract method")
    
    def run(self):
        """
        Runs the genetic algorithm by performing initialization, iterations, and exiting operations until the termination
        condition is met. Returns the result of the exiting operations and sets the elapsed time attribute.

        :return: The result of the exiting operations.
        """
        self.initialization()
        while not self.termination_condition():
            self.iteration()
        result = self.exiting_operations()
        return result