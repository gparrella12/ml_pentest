from ml_pentest.models.wrappers.model_wrapper import ModelWrapper
from abc import ABC

class BlackBoxAttack(ABC):
    """
    BlackBoxAttack class serves as an abstract base class for implementing query-based black box attacks on classifiers.

    Attributes:
        _model_wrapper (ModelWrapper): An object that wraps the classifier model used for classifying samples.

    Methods:
        __init__(model_wrapper: ModelWrapper) -> None: Constructor that initializes the BlackBoxAttack object.
    """
    """
    A class representing a query black box attack on a classifier.
    """
    def __init__(self, model_wrapper) -> None:
        """Create an object of this class by passing the classifier to use to classify the samples.

        Args:
            model_wrapper (ModelWrapper): an object that wrap the model to use to classiify the samples.
        """
        if model_wrapper is None: #or not isinstance(model_wrapper, ModelWrapper):
            raise ValueError("Model wrapper not valid!", type(model_wrapper))
        self._model_wrapper = model_wrapper